install.packages('tidyverse')
library(tidyverse)
lib
library(tidyverse)
updateR()
install.packages('installr')
updater()
library(installr)
updateR()
if (!requireNamespace("remotes", quietly = TRUE)) {
install.packages("remotes")
}
remotes::install_github("mojaveazure/seurat-disk")
install.packages("DT")
install.packages("reticulate")
shiny::runApp('Documents/nss_docs/nss_projects/codex_halo_qc/HALO_QC')
runApp('Documents/nss_docs/nss_projects/codex_halo_qc/HALO_QC')
runApp('Documents/nss_docs/nss_projects/codex_halo_qc/HALO_QC')
shiny::runApp('Documents/nss_docs/nss_projects/codex_halo_qc/HALO_QC_II')
install.packages('Seurat')
library(Seurat)
library(data.table)
library(tidyverse)
rawfile <- 'https://github.com/liuqivandy/scRNABatchQC/raw/master/bioplar1.csv.gz'
rawdata <- data.frame(fread(rawfile),row.names=1)
bioplar1 <- CreateSeuratObject(counts=rawdata,min.cells = 3, min.features = 200, project = 'bioplar')
View(bioplar1)
View(rawdata)
bioplar1[['percent.mt']]<-PercentageFeatureSet(bioplar1, pattern = '^mt-"')
bioplar1 <- subset(bioplar1,subset-nFeature_RNA > 200 & nCount_RNA>500 & percent.mt<10)
bioplar1 <- subset(bioplar1,subset=nFeature_RNA > 200 & nCount_RNA>500 & percent.mt<10)
bioplar1 <- NormalizeData(bioplar1) %>%
FindVariableFeatures() %>%
ScaleData() %>%
RunPCA() %>% FindNeighbors() %>%
FindClusters()
library('tidyverse')
library(ggplot2)
set.seed(2022)
library('tidyverse')
library(ggplot2)
set.seed(2022)
n <- 100
x <- rnorm(n)
y <- 3*x + rnorm(n,0,5)
dat<-as.data.frame(cbind(y,x))
plot(y~x, data=d1)
ggplot(aes(x=dat$x, y=dat$y)) %>%
geom_point()
ggplot(aes(x=dat$x, y=dat$y)) +
geom_point()
dat<-as.data.frame(cbind(y,x))
View(dat)
d1<-as.data.frame(cbind(y,x))
ggplot(aes(x=d1$x, y=d1$y)) +
geom_point()
librar(lattice)
library(lattice)
with(d1, plot*x,y, pch=16)
n <- 100
x <- rnorm(n)
y <- 3*x + rnorm(n,0,5)
d1<-as.data.frame(cbind(y,x))
ggplot(aes(x=d1$x, y=d1$y)) +
geom_point()
with(d1, plot*x,y, pch=16)
d1 %>%
ggplot(aes(x=x, y=y)) +
geom_point()
d1 %>%
ggplot(aes(x=x, y=y)) +
geom_point() +
geom_smooth(method = 'lm')
d1 %>%
ggplot(aes(x=x, y=y)) +
geom_point() +
geom_smooth(method = 'lm') %>%
geom_smooth(method = 'loess')
d1 %>%
ggplot(aes(x=x, y=y)) +
geom_point() +
geom_smooth(method = 'lm') +
geom_smooth(method = 'loess')
cor.test(x,y, method = 'pearson')
cor.test(x,y, method = 'spearman')
spearmanCI <- function(x, y, alpha = 0.5){
rs <- cor(x, y, method = 'spearman', use = 'complete.obs')
n <- sum(complete.cases(x,y))
sort(tanh(atanh(rs) + c(-1,1)*sqrt((1+rs^2/2)/(n-3)*qnorm(p=alpha/2))))
}
spearmanCI(x,y)
sort(tanh(atanh(rs)) + c(-1,1)*sqrt((1+rs^2/2)/(n-3)*qnorm(p=alpha/2)))
spearmanCI <- function(x, y, alpha = 0.5){
rs <- cor(x, y, method = 'spearman', use = 'complete.obs')
n <- sum(complete.cases(x,y))
sort(tanh(atanh(rs)) + c(-1,1)*sqrt((1+rs^2/2)/(n-3)*qnorm(p=alpha/2)))
}
spearmanCI(x,y)
spearmanCI <- function(x, y, alpha = 0.5){
rs <- cor(x, y, method = 'spearman', use = 'complete.obs')
n <- sum(complete.cases(x,y))
sort(tanh(atanh(rs) + c(-1,1)*sqrt((1+rs^2/2)/(n-3))*qnorm(p = alpha/2)))
}
spearmanCI(x,y)
set.seed(2022)
n <-100x <-rnorm(n)
y <-3*x + rnorm(n,0,5)
d1<-as.data.frame(cbind(y, x))
set.seed(2022)
n <-100
x <-rnorm(n)
y <-3*x + rnorm(n,0,5)
d1<-as.data.frame(cbind(y, x))
d1 %>%
ggplot(aes(x=x, y=y)) +
geom_point() +
geom_smooth(method = 'lm') +
geom_smooth(method = 'loess')
with(d1, plot*x,y, pch=16)
cor.test(x,y, method = 'pearson')
cor.test(x,y, method = 'spearman')
spearmanCI <- function(x, y, alpha = 0.5){
rs <- cor(x, y, method = 'spearman', use = 'complete.obs')
n <- sum(complete.cases(x,y))
sort(tanh(atanh(rs) + c(-1,1)*sqrt((1+rs^2/2)/(n-3))*qnorm(p = alpha/2)))
}
spearmanCI(x,y)
summary(lm(y~x, data=d1))
library(latticeExtra)
library(quantreg)
install.packages('quantreg')
summary(lm(y~x, data=d1))
xyplot(y~x, data=d1, col=1, pch=16)
?describe
??describe
install.packages('Hmisc')
?describe
??describe
library(Hmisc)
?describe
library(tidyverse)
library(ggplot2)
setwd("~/Documents/EDA/20221021-HandelP-analyses/notebooks")
morphology <- read_csv('../data/20221105-morphology_cols.csv')
annotated_cells <- read_csv('../data/20221107-annotated_cells.csv')
annotations <- annotated_cells %>%
select(Sample, `Object Id`, primary_cell_group, secondary_cell_group, tertiary_cell_group)
ann_morph <- annotations %>%
left_join(morphology, by = c(Sample, `Object Id`))
?left_join
ann_morph <- annotations %>%
left_join(morphology, by = c('Sample', 'Object Id'))
ann_morph <- ann_morph %>%
mutate(`Tissue Section` = str_extract(`Tissue Section`, "^[HBTU]{1}"))
View(ann_morph)
ann_morph %>%
ggplot(aes(x = primary_cell_group, y = `Nucleus Roundness`)) +
geom_boxplot() +
coord_flip()
library(ggpubr)
ann_morph %>%
ggplot(aes(x = primary_cell_group, y = `Nucleus Roundness`)) +
geom_boxplot() +
coord_flip() +
stat_compare_means()
ann_morph %>%
ggplot(aes(x = primary_cell_group, y = `Nucleus Roundness`)) +
geom_boxplot() +
stat_compare_means()
?combn
my_comparisons <- combn(unique(ann_morph$primary_cell_group), 4)
pairs <- list()
pairs[[i]] <- c(my_comparisons[1,i], my_comparisons[2,i], my_comparisons[3,i], my_comparisons[4,i])
for (i in 1:ncol(my_comparisons)) {
pairs[[i]] <- c(my_comparisons[1,i], my_comparisons[2,i], my_comparisons[3,i], my_comparisons[4,i])
}
View(pairs)
pairs <- list()
for (i in 1:ncol(my_comparisons)) {
pairs[[i]] <- c(my_comparisons[1,i], my_comparisons[2,i])
}
my_comparisons <- combn(unique(ann_morph$primary_cell_group), 4)
pairs <- list()
for (i in 1:ncol(my_comparisons)) {
pairs[[i]] <- c(my_comparisons[1,i], my_comparisons[2,i])
}
library(ggsignif)
ann_morph %>%
ggplot(aes(x = primary_cell_group, y = `Nucleus Roundness`)) +
geom_boxplot() +
geom_signif(
comparisons = ann_morph$primary_cell_group,
map_signif_level = T
)
pairs <- list()
for (i in 1:ncol(my_comparisons)) {
pairs[[i]] <- c(my_comparisons[1,i], my_comparisons[2,i])
}
my_comparisons
my_comparisons <- combn(unique(ann_morph$primary_cell_group), 2)
my_comparisons
my_comparisons <- combn(unique(ann_morph$primary_cell_group), 2)
pairs <- list()
for (i in 1:ncol(my_comparisons)) {
pairs[[i]] <- c(my_comparisons[1,i], my_comparisons[2,i])
}
ann_morph %>%
ggplot(aes(x = primary_cell_group, y = `Nucleus Roundness`)) +
geom_boxplot() +
stat_compare_means(comparisons = pairs)
#-----Tissue Section Group Comps
my_comparisons <- combn(unique(ann_morph$`Tissue Section`), 2)
pairs <- list()
for (i in 1:ncol(my_comparisons)) {
pairs[[i]] <- c(my_comparisons[1,i], my_comparisons[2,i])
}
ann_morph %>%
ggplot(aes(x = `Tissue Section`, y = `Nucleus Roundness`)) +
geom_boxplot() +
stat_compare_means(comparisons = pairs)
#-----secondar_cell Group Comps
immune <- ann_morph %>%
filter(primary_cell_group == 'immune')
immune %>%
ggplot(aes(x = secondary_cell_group, y = `Nucleus Roundness`)) +
geom_boxplot() +
stat_compare_means(comparisons = pairs)
my_comparisons <- combn(unique(immune$secondary_cell_group), 2)
pairs <- list()
for (i in 1:ncol(my_comparisons)) {
pairs[[i]] <- c(my_comparisons[1,i], my_comparisons[2,i])
}
immune %>%
ggplot(aes(x = secondary_cell_group, y = `Nucleus Roundness`)) +
geom_boxplot() +
stat_compare_means(comparisons = pairs)
#-----Age Group Comps
my_comparisons <- combn(unique(ann_morph$`Age Group`), 2)
pairs <- list()
for (i in 1:ncol(my_comparisons)) {
pairs[[i]] <- c(my_comparisons[1,i], my_comparisons[2,i])
}
ann_morph %>%
ggplot(aes(x = `Age Group`, y = `Nucleus Roundness`)) +
geom_boxplot() +
stat_compare_means(comparisons = pairs)
ann_morph %>%
ggplot(aes(x = `Age Group`, y = `Cell Area (µm²)`)) +
geom_boxplot() #+
#-----secondar_cell Group Comps
immune <- ann_morph %>%
filter(primary_cell_group == 'immune')
my_comparisons <- combn(unique(immune$secondary_cell_group), 2)
pairs <- list()
for (i in 1:ncol(my_comparisons)) {
pairs[[i]] <- c(my_comparisons[1,i], my_comparisons[2,i])
}
immune %>%
ggplot(aes(x = secondary_cell_group, y = `Cell Area (µm²)`)) +
geom_boxplot()
unique(ann_morph$primary_cell_group)
setwd("~/Documents/simplified_lims")
setwd("~/Documents/simplified_lims/notebooks")
library(httr)
library(tidyverse)
library(httr)
library(tidyverse)
url = 'https://na1.platformforscience.com/login'
response = GET(url)
response$status_code
library(jsonlite)
library(rvest)
query = list(
"lims_userName"="lims",
"lims_password"="Core#2017",
)
response = GET(url,
query = query)
query = list(
"lims_userName"="lims",
"lims_password"="Core#2017"
)
response = GET(url,
query = query)
response$status_code
View(response)
response[["url"]]
url = 'https://na1.platformforscience.com/609546918/corelims?cmd=home&queryString=&submit=Login'
query = list(
"lims_userName"="lims",
"lims_password"="Core#2017"
)
response = GET(url,
query = query)
response[["url"]]
url = 'https://na1.platformforscience.com/609546918/corelims?cmd=home&queryString=&submit=Login'
query = list(
"lims_userName"="chunhua.dai@vanderbilt.edu",
"lims_password"="Core#2017"
)
response = GET(url,
query = query)
response[["url"]]
response$status_code
url = 'https://na1.platformforscience.com/609546918/corelims?entityId=10969055&cmd=get&entityType=CORE+APPLICATION&tenant=609546918'
query = list(
"lims_userName"="chunhua.dai@vanderbilt.edu",
"lims_password"="Core#2017"
)
response = GET(url,
query = query)
response[["url"]]
url = 'https://na1.platformforscience.com/609546918/corelims?entityId=10969055&cmd=get&entityType=CORE+APPLICATION&tenant=609546918'
query = list(
"lims_userName"="chunhua.dai@vanderbilt.edu",
"lims_password"="Core#2017"
)
response = GET(url,
query = query)
response[["url"]]
url = 'https://na1.platformforscience.com/609546918/corelims?attributeId12040274oper=&entityType=DONOR&ci_donor_gender=&ci_donor_ID=&attributeId11015582oper=&attributeId12040274=&ci-donor_age_units=&queryDestination=listReport&attributeId11015582=&Submit=Submit&ci_donor_disease=&cmd=query&tenant=609546918'
query = list(
"lims_userName"="chunhua.dai@vanderbilt.edu",
"lims_password"="Core#2017"
)
response = GET(url,
query = query)
response[["url"]]
content(response)
content(response, as = 'text')
content(response, as = 'text') %>%
fromJSON()
test <-content(response, as = 'text')
content(response, as = 'text')
url_2 = 'https://na1.platformforscience.com/609546918/corelims?cmd=home&queryString=&submit=Login'
query = list(
"lims_userName"="chunhua.dai@vanderbilt.edu",
"lims_password"="Core#2017"
)
response = GET(url,
query = query)
response[["url"]]
response = GET(url_2,
query = query)
response[["url"]]
response = GET(url,
query = query)
response$status_code
content(response, as = 'text')
url = 'https://na1.platformforscience.com/609546918/odata/$metadata'
response = GET(url)
response$status_code
url = 'https://na1.platformforscience.com/609546918/odata/$metadata'
response = GET(url)
response$status_code
username <- 'chunhua.dai@vanderbilt.edu'
password <- 'Core#2017'
url = 'https://na1.platformforscience.com/609546918/odata/$metadata'
username <- 'chunhua.dai@vanderbilt.edu'
password <- 'Core#2017'
response = GET(url,
authnticate(username,
password,
type = 'basic'))
response = GET(url,
authenticate(username,
password,
type = 'basic'))
response$status_code
content(response, as = 'text')
response %>%
html_text()
test <- content(response, as = 'text')
test %>%
html_text()
test <- content(response, as = 'html')
test <- content(response, as = 'raw')
test %>%
html_text()
test <- content(response, as = 'text')
test
url = 'https://na1.platformforscience.com/609546918/odata/$metadata'
url = 'https://na1.platformforscience.com/609546918/odata/$metadata'
query = list(
'entityType' = 'DONOR',
)
query = list(
'entityType' = 'DONOR'
)
username <- 'chunhua.dai@vanderbilt.edu'
password <- 'Core#2017'
response = GET(url,
authenticate(username,
password,
type = 'basic'),
query = query)
response$status_code
test <- content(response, as = 'text')
test
