data <- content(response, as = 'text') %>%
fromJSON()
response = GET(url,
add_headers(.headers = c('Prefer'='odata.maxpagesize=1000')),
authenticate(username,
password,
type = 'basic'))
response$status_code
data <- content(response, as = 'text') %>%
fromJSON()
response = GET(url,
add_headers('Prefer'='odata.maxpagesize=1000'),
authenticate(username,
password,
type = 'basic'))
response$status_code
data <- content(response, as = 'text') %>%
fromJSON()
response = GET(url,
add_headers(.headers = c('Content-Type' = 'application/json;odata.metadata=minimal;charset=UTF-8',
'Prefer'='odata.maxpagesize=1000')),
authenticate(username,
password,
type = 'basic'))
response$status_code
data <- content(response, as = 'text') %>%
fromJSON()
response = GET(url,
add_headers(.headers = c('Content-Type' = 'application/json;odata.metadata=minimal;charset=UTF-8',
'tenantId', 'Vanderbilt University PROD',
'Prefer'='odata.maxpagesize=1000')),
authenticate(username,
password,
type = 'basic'))
response$status_code
response = GET(url,
add_headers(.headers = c('Content-Type' = 'application/json;odata.metadata=minimal;charset=UTF-8',
'tenantId', 'Vanderbilt University PROD',
'Prefer'='odata.maxpagesize=1000')),
authenticate(username,
password,
type = 'basic'))
response$status_code
response = GET(url,
add_headers(.headers = c('Content-Type' = 'application/json;odata.metadata=minimal;charset=UTF-8',
'Prefer'='odata.maxpagesize=1000')),
authenticate(username,
password,
type = 'basic'))
response$status_code
data[1]
data[2]
response = GET(url,
add_headers(.headers = c('Content-Type' = 'application/json;odata.metadata=minimal;charset=UTF-8',
Prefer='odata.maxpagesize=1000')),
authenticate(username,
password,
type = 'basic'))
response$status_code
data <- content(response, as = 'text') %>%
fromJSON()
test <- data[2]
View(test)
data[2]
data[[2]]
test <- data[[2]]
View(test)
response = GET(url,
add_headers(.headers = c('Content-Type' = 'application/json;odata.metadata=minimal;charset=UTF-8')),
authenticate(username,
password,
type = 'basic'))
response$status_code
data <- content(response, as = 'text') %>%
fromJSON()
test <- data[[2]]
response = GET(url,
add_headers(.headers = c('Content-Type' = 'application/json;odata.metadata=minimal;charset=UTF-8',
'Prefer'='odata.maxpagesize=1000')),
authenticate(username,
password,
type = 'basic'))
response$status_code
data <- content(response, as = 'text') %>%
fromJSON()
class(data)
class(data[[2]])
class(data[2)
class(data[2])
test <- data[[2]]
test %>%
colnames()
lims_data <- data[[2]]
View(lims_data)
api_data <- data[[2]]
select_data < api_data[colSums(!is.na(api_data)) > 0]
select_data <- api_data[colSums(!is.na(api_data)) > 0]
View(select_data)
select_data <-
select(colSums(!is.na(api_data)) > 0)
select_data <- api_data
select_data <- api_data %>%
select(colSums(!is.na(api_data)) > 0)
select(where(~sum(!is.na(.x)) > 0))
library(tidyverse)
select_data <- api_data
select_data <- api_data %>%
select(
where(
~sum(!is.na(.x)) > 0
)
)
select_data <- api_data %>%
select(where(~sum(!is.na(.x)) > 0)) %>%
select(-c(DONOR, Id, Sequence, Created, Modified, Active, LikedBy, FollowedBy, Locked, DONOR_CREATED, `HLA_DOCUMENT@odata.mediaContentType`))
select_data <- api_data %>%
select(where(~sum(!is.na(.x)) > 0)) %>%
select(-c(EntityTypeName, Id, Sequence, Created, Modified, Active, LikedBy, FollowedBy, Locked, DONOR_CREATED, `HLA_DOCUMENT@odata.mediaContentType`))
shiny::runApp('Documents/EDA/RShiny_LIMS/LIMS_Data')
url = 'https://na1.platformforscience.com/609546918/odata/DONOR'
username <- 'chunhua.dai@vanderbilt.edu'
password <- 'Core#2017'
response = GET(url,
add_headers(.headers = c('Content-Type' = 'application/json;odata.metadata=minimal;charset=UTF-8',
'Prefer'='odata.maxpagesize=1500')),
authenticate(username,
password,
type = 'basic'))
response$status_code
runApp('Documents/EDA/RShiny_LIMS/LIMS_Data')
runApp('Documents/EDA/RShiny_LIMS/LIMS_Data')
runApp('Documents/EDA/RShiny_LIMS/LIMS_Data')
runApp()
runApp('Documents/EDA/RShiny_LIMS/LIMS_Data')
url = 'https://na1.platformforscience.com/609546918/odata/$metadata'
username <- 'chunhua.dai@vanderbilt.edu'
password <- 'Core#2017'
response = GET(url)
response$status_code
password <- 'Coe#2017'
response = GET(url)
response$status_code
response = GET(url,
authenticate(username,
password,
type = 'basic'))
response$status_code
password <- 'Core#2017'
response = GET(url,
authenticate(username,
password,
type = 'basic'))
response$status_code
runApp('Documents/EDA/RShiny_LIMS/LIMS_Data')
runApp('Documents/EDA/RShiny_LIMS/LIMS_Data')
runApp('Documents/EDA/RShiny_LIMS/LIMS_Data')
runApp('Documents/EDA/RShiny_LIMS/LIMS_Data')
runApp('Documents/EDA/RShiny_LIMS/LIMS_Data')
runApp('Documents/EDA/RShiny_LIMS/LIMS_Data')
setwd("~/Documents/EDA/RShiny_LIMS/notebooks")
url = 'https://na1.platformforscience.com/609546918/odata/DONOR'
username <- 'chunhua.dai@vanderbilt.edu'
password <- 'Core#2017'
response = GET(url,
add_headers(.headers = c('Content-Type' = 'application/json;odata.metadata=minimal;charset=UTF-8',
'Prefer'='odata.maxpagesize=1500')),
authenticate(username,
password,
type = 'basic'))
response$status_code
data <- content(response, as = 'text') %>%
fromJSON()
class(data[2])
api_data <- data[[2]]
write_csv(api_data, '../data/all_cols-api.csv')
View(api_data)
setwd("~/Documents/EDA/RShiny_LIMS/notebooks")
#-----matched api cols to lims cols
col_conv <- read_csv('../data/20221206-col_conversions.xlsx')
library(readxl)
#-----matched api cols to lims cols
col_conv <- read_excel('../data/20221206-col_conversions.xlsx')
View(col_conv)
#------lims to api metadata conversion csv
col_conv <- read_csv('../data/20221206-col_conversions.csv')
View(col_conv)
w_cols <- col_conv %>%
select(API_col) %>%
as.list()
View(w_cols)
w_cols <- col_conv %>%
select(API_col)
View(w_cols)
w_cols <- col_conv$API_col
w_api_cols <- col_conv$API_col
rmv(w_cols)
rm(w_cols)
w_lims_cols <- col_conv$LIMS_col
filt_cols <- api_data %>%
select(w_api_cols)
View(filt_cols)
#Donor_processing_from_lot needs to be parsed out and counted
#-----made column for age in years & fixed discrepencies in isolation centers
select_data <- filt_cols %>%
select(where(~sum(!is.na(.x)) > 0)) %>%
select(!contains(uw_cols)) %>%
mutate(AGE_IN_YEARS = round(if_else((CI_DONOR_AGE_UNITS == 'months'), (CI_DONOR_AGE/12),
if_else((CI_DONOR_AGE_UNITS == 'days'), (CI_DONOR_AGE/365), CI_DONOR_AGE)), 4)) %>%
mutate(ISLETS_ISOLATION_CENTER = if_else(str_detect(ISLETS_ISOLATION_CENTER, 'Pennsyl') == T, 'University of Pennsylvania',
if_else(str_detect(ISLETS_ISOLATION_CENTER, 'Louisville') == T, 'University of Louisville',
if_else(str_detect(ISLETS_ISOLATION_CENTER, 'UCSF') == T, 'USCF',
if_else(str_detect(ISLETS_ISOLATION_CENTER, 'Southern California') == T, 'Southern California',
if_else(str_detect(ISLETS_ISOLATION_CENTER, 'Prodo') == T, 'Prodo',
if_else(str_detect(ISLETS_ISOLATION_CENTER, 'The\\sScharp|(?<!\\s)Scharp') == T, 'Scharp-Lacy Research Institute',
if_else(str_detect(ISLETS_ISOLATION_CENTER, 'Alberta') == T, 'University of Alberta', ISLETS_ISOLATION_CENTER))))))))
#Donor_processing_from_lot needs to be parsed out and counted
#-----made column for age in years & fixed discrepencies in isolation centers
select_data <- filt_cols %>%
select(where(~sum(!is.na(.x)) > 0)) %>%
mutate(AGE_IN_YEARS = round(if_else((CI_DONOR_AGE_UNITS == 'months'), (CI_DONOR_AGE/12),
if_else((CI_DONOR_AGE_UNITS == 'days'), (CI_DONOR_AGE/365), CI_DONOR_AGE)), 4)) %>%
mutate(ISLETS_ISOLATION_CENTER = if_else(str_detect(ISLETS_ISOLATION_CENTER, 'Pennsyl') == T, 'University of Pennsylvania',
if_else(str_detect(ISLETS_ISOLATION_CENTER, 'Louisville') == T, 'University of Louisville',
if_else(str_detect(ISLETS_ISOLATION_CENTER, 'UCSF') == T, 'USCF',
if_else(str_detect(ISLETS_ISOLATION_CENTER, 'Southern California') == T, 'Southern California',
if_else(str_detect(ISLETS_ISOLATION_CENTER, 'Prodo') == T, 'Prodo',
if_else(str_detect(ISLETS_ISOLATION_CENTER, 'The\\sScharp|(?<!\\s)Scharp') == T, 'Scharp-Lacy Research Institute',
if_else(str_detect(ISLETS_ISOLATION_CENTER, 'Alberta') == T, 'University of Alberta', ISLETS_ISOLATION_CENTER))))))))
#Donor_processing_from_lot needs to be parsed out and counted
#-----made column for age in years & fixed discrepencies in isolation centers
select_data <- filt_cols %>%
mutate(AGE_IN_YEARS = round(if_else((CI_DONOR_AGE_UNITS == 'months'), (CI_DONOR_AGE/12),
if_else((CI_DONOR_AGE_UNITS == 'days'), (CI_DONOR_AGE/365), CI_DONOR_AGE)), 4)) %>%
mutate(ISLETS_ISOLATION_CENTER = if_else(str_detect(ISLETS_ISOLATION_CENTER, 'Pennsyl') == T, 'University of Pennsylvania',
if_else(str_detect(ISLETS_ISOLATION_CENTER, 'Louisville') == T, 'University of Louisville',
if_else(str_detect(ISLETS_ISOLATION_CENTER, 'UCSF') == T, 'USCF',
if_else(str_detect(ISLETS_ISOLATION_CENTER, 'Southern California') == T, 'Southern California',
if_else(str_detect(ISLETS_ISOLATION_CENTER, 'Prodo') == T, 'Prodo',
if_else(str_detect(ISLETS_ISOLATION_CENTER, 'The\\sScharp|(?<!\\s)Scharp') == T, 'Scharp-Lacy Research Institute',
if_else(str_detect(ISLETS_ISOLATION_CENTER, 'Alberta') == T, 'University of Alberta', ISLETS_ISOLATION_CENTER))))))))
lot_processing <- select_data$DONOR_PROCESSING_FROM_LOT
lot_processing <- lot_processing[!is.na(lot_processing)]
lot_processing_list <- str_c(lot_processing, collapse = '-')
lot_processing_list <- str_split(lot_processing_list, '-')
processing_unique <- sapply(lot_processing_list, unique)
remove <- c('PFA', 'fixed CMC', 'embedded', 'unknown', 'sequencing')
processing_unique <- append(processing_unique[! processing_unique %in% remove], c('PFA-fixed CMC-embedded', 'RNA-sequencing'))
for (i in processing_unique) {
variable <- as.symbol(i)
select_data <- select_data %>%
mutate(variable = str_count(DONOR_PROCESSING_FROM_LOT, i)) %>%
rename_with(~ gsub('variable', i, .x, fixed = T))
}
select_data <- select_data %>%
mutate(RNA = RNA - `RNA-sequencing`) %>%
select(-DONOR_PROCESSING_FROM_LOT)
View(select_data)
test <- select_data %>%
mutate(DATE_PANCREAS_ISLET_RECEIVED = as.Date(DATE_PANCREAS_ISLET_RECEIVED, format('%Y-%m-%d')))
test <- select_data %>%
mutate(DATE_PANCREAS_ISLET_RECEIVED = as.Date(DATE_PANCREAS_ISLET_RECEIVED, format='%Y-%m-%d'))
View(test)
class(test$DATE_PANCREAS_ISLET_RECEIVED)
?mutate_at
library(lubridate)
test <- select_data %>%
mutate(DATE_PANCREAS_ISLET_RECEIVED = as_datetime(DATE_PANCREAS_ISLET_RECEIVED, format='%Y-%m-%d'))
test <- select_data %>%
mutate(DATE_PANCREAS_ISLET_RECEIVED = as_datetime(DATE_PANCREAS_ISLET_RECEIVED))
test <- select_data %>%
mutate(DATE_PANCREAS_ISLET_RECEIVED = ymd(DATE_PANCREAS_ISLET_RECEIVED))
test %>% colnames()
date_cols = c('DATE_PANCREAS_ISLET_RECEIVED','CI_DATE_PANCREAS_PROCESSED')
date_cols = c('DATE_PANCREAS_ISLET_RECEIVED','CI_DATE_PANCREAS_PROCESSED')
date_time_cols = c('DATE___TIME_OF_DEATH', 'DATE___TIME_OF_CROSS_CLAMP')
date_time_cols_2 = c('TIME_PANCREAS_PROCUREMENT')
test <- select_data %>%
mutate(DATE_PANCREAS_ISLET_RECEIVED = ymd(contains(date_cols)))
test <- select_data %>%
mutate_at(vars(contains(date_cols)), ymd(.x))
test <- select_data %>%
mutate_at(vars(contains(date_cols)), ymd())
test <- select_data %>%
mutate_at(vars(contains(date_cols)), ymd)
test <- select_data %>%
mutate_at(vars(contains(date_cols)), ymd) %>%
mutate_at(vars(contains(date_time_cols), ymd_hms))
test <- select_data %>%
mutate_at(vars(contains(date_cols)), ymd) %>%
mutate_at(vars(contains(date_time_cols)), ymd_hms)
test <- select_data %>%
mutate_at(vars(contains(date_cols)), ymd)
test <- select_data %>%
mutate_at(vars(contains(date_cols)), ymd) %>%
mutate_at(vars(contains(date_time_cols)), ymd_hms)
test <- select_data %>%
mutate_at(vars(contains(date_cols)), ymd) %>%
mutate_at(vars(contains(date_time_cols)), ymd_hms) %>%
mutate_at(vars(contains(date_time_cols_2)), mdy_hm)
test <- select_data %>%
mutate_at(vars(contains(date_cols)), ymd) %>%
mutate_at(vars(contains(date_time_cols)), ymd_hms) %>%
mutate_at(vars(contains(date_time_cols_2)), mdy_hm) %>%
mutate(C_PEPTIDE_LEVEL = if_else(C_PEPTIDE_LEVEL == '<0.02', '0.01', C_PEPTIDE_LEVEL)) %>%
mutate(C_PEPTIDE_LEVEL = as.numeric(C_PEPTIDE_LEVEL))
test <- select_data %>%
mutate_at(vars(contains(date_cols)), ymd) %>%
mutate_at(vars(contains(date_time_cols)), ymd_hms) %>%
mutate_at(vars(contains(date_time_cols_2)), mdy_hm) %>%
mutate(C_PEPTIDE_LEVEL = if_else(C_PEPTIDE_LEVEL == '<0.02', '0.01', C_PEPTIDE_LEVEL)) %>%
mutate(C_PEPTIDE_LEVEL = round(as.numeric(C_PEPTIDE_LEVEL), 2))
hla_chr_num_conv = c('DONOR_A1', 'DONOR_A2', 'DONOR_B1', 'DONOR_B2')
to_numeric = c('C_PEPTIDE_LEVELS', 'COLD_ISCHEIC_TIME')
test <- select_data %>%
mutate_at(vars(contains(date_cols)), ymd) %>%
mutate_at(vars(contains(date_time_cols)), ymd_hms) %>%
mutate_at(vars(contains(date_time_cols_2)), mdy_hm) %>%
mutate(C_PEPTIDE_LEVEL = if_else(C_PEPTIDE_LEVEL == '<0.02', '0.01', C_PEPTIDE_LEVEL)) %>%
mutate_at(vars(contains(to_numeric)), round(as.numeric, 4))
test <- select_data %>%
mutate_at(vars(contains(date_cols)), ymd) %>%
mutate_at(vars(contains(date_time_cols)), ymd_hms) %>%
mutate_at(vars(contains(date_time_cols_2)), mdy_hm) %>%
mutate(C_PEPTIDE_LEVEL = if_else(C_PEPTIDE_LEVEL == '<0.02', '0.01', C_PEPTIDE_LEVEL)) %>%
mutate_at(vars(contains(to_numeric)), round(as.numeric(), 4))
test <- select_data %>%
mutate_at(vars(contains(date_cols)), ymd) %>%
mutate_at(vars(contains(date_time_cols)), ymd_hms) %>%
mutate_at(vars(contains(date_time_cols_2)), mdy_hm) %>%
mutate(C_PEPTIDE_LEVEL = if_else(C_PEPTIDE_LEVEL == '<0.02', '0.01', C_PEPTIDE_LEVEL)) %>%
mutate_at(vars(contains(to_numeric)), round(as.numeric, 4))
test <- select_data %>%
mutate_at(vars(contains(date_cols)), ymd) %>%
mutate_at(vars(contains(date_time_cols)), ymd_hms) %>%
mutate_at(vars(contains(date_time_cols_2)), mdy_hm) %>%
mutate(C_PEPTIDE_LEVEL = if_else(C_PEPTIDE_LEVEL == '<0.02', '0.01', C_PEPTIDE_LEVEL)) %>%
mutate_at(vars(contains(to_numeric)), as.numeric)
select_data <- select_data %>%
mutate_at(vars(contains(date_cols)), ymd) %>%
mutate_at(vars(contains(date_time_cols)), ymd_hms) %>%
mutate_at(vars(contains(date_time_cols_2)), mdy_hm) %>%
mutate(C_PEPTIDE_LEVEL = if_else(C_PEPTIDE_LEVEL == '<0.02', '0.01', C_PEPTIDE_LEVEL)) %>%
mutate_at(vars(contains(to_numeric)), as.numeric)
write_csv(select_data, '../data/20221207-fixed_cols.csv')
library(tidyverse)
library(ggplot2)
library(plotly)
lims_data <- read_csv('../data/20221207-fixed_cols.csv')
if_else((AGE_IN_YEARS > 90 $ AGE_IN_YEARS <= 100), '91-100',))
if_else((AGE_IN_YEARS > 90 $ AGE_IN_YEARS <= 100), '91-100'), NA)
lims_data <- lims_data %>%
mutate(AGE_GROUPS = if_else((AGE_IN_YEARS > 0 $ AGE_IN_YEARS <= 10), '1-10', NA))
lims_data <- lims_data %>%
mutate(AGE_GROUPS = if_else((AGE_IN_YEARS > 0 $ AGE_IN_YEARS <= 10), '1-10', NA))
lims_data <- lims_data %>%
mutate(AGE_GROUPS = if_else((AGE_IN_YEARS > 0 $ AGE_IN_YEARS =< 10), '1-10', NA))
lims_data <- lims_data %>%
mutate(AGE_GROUPS = if_else((AGE_IN_YEARS > 0 $ AGE_IN_YEARS <= 10), '1-10', NA))
if_else((AGE_IN_YEARS > 90&AGE_IN_YEARS <= 100), '91-100'), NA)
lims_data <- lims_data %>%
mutate(AGE_GROUPS = if_else((AGE_IN_YEARS > 0&AGE_IN_YEARS <= 10), '1-10',
if_else((AGE_IN_YEARS > 10&AGE_IN_YEARS <= 20), '11-20',
if_else((AGE_IN_YEARS > 20&AGE_IN_YEARS <= 30), '21-30',
if_else((AGE_IN_YEARS > 30&AGE_IN_YEARS <= 40), '31-40',
if_else((AGE_IN_YEARS > 40&AGE_IN_YEARS <= 50), '41-50',
if_else((AGE_IN_YEARS > 50&AGE_IN_YEARS <= 60), '51-60',
if_else((AGE_IN_YEARS > 60&AGE_IN_YEARS <= 70), '61-70',
if_else((AGE_IN_YEARS > 70&AGE_IN_YEARS <= 80), '71-80',
if_else((AGE_IN_YEARS > 80&AGE_IN_YEARS <= 90), '81-90',
if_else((AGE_IN_YEARS > 90&AGE_IN_YEARS <= 100), '91-100', NA)))))))))))
lims_data <- lims_data %>%
mutate(AGE_GROUPS = if_else((AGE_IN_YEARS > 0&AGE_IN_YEARS <= 10), '1-10',
if_else((AGE_IN_YEARS > 10&AGE_IN_YEARS <= 20), '11-20',
if_else((AGE_IN_YEARS > 20&AGE_IN_YEARS <= 30), '21-30',
if_else((AGE_IN_YEARS > 30&AGE_IN_YEARS <= 40), '31-40',
if_else((AGE_IN_YEARS > 40&AGE_IN_YEARS <= 50), '41-50',
if_else((AGE_IN_YEARS > 50&AGE_IN_YEARS <= 60), '51-60',
if_else((AGE_IN_YEARS > 60&AGE_IN_YEARS <= 70), '61-70',
if_else((AGE_IN_YEARS > 70&AGE_IN_YEARS <= 80), '71-80',
if_else((AGE_IN_YEARS > 80&AGE_IN_YEARS <= 90), '81-90',
if_else((AGE_IN_YEARS > 90&AGE_IN_YEARS <= 100), '91-100', 'NA')))))))))))
View(lims_data)
lims_data %>%
ggplot(aes(x = AGE_GROUPS)) +
geom_bar()
lims_data %>%
ggplot(aes(x = AGE_IN_YEARS)) %>%
geom_histogram()
lims_data %>%
ggplot(aes(x = AGE_IN_YEARS)) +
geom_histogram()
lims_data %>%
select(AGE_IN_YEARS, AGE_GROUPS) %>%
filter(AGE_IN_YEARS < 10)
ages <- lims_data %>%
select(AGE_IN_YEARS, AGE_GROUPS) %>%
filter(AGE_IN_YEARS < 10)
View(ages)
lims_data %>%
ggplot(aes(x = AGE_GROUPS, fill = CI_DONOR_GENDER)) +
geom_bar()
lims_data %>%
ggplot(aes(x = AGE_GROUPS, fill = CI_DONOR_RACE)) +
geom_bar()
lims_data %>%
ggplot(aes(x = AGE_GROUPS, fill = ISLETS_ISOLATION_CENTER)) +
geom_bar()
url = 'https://na1.platformforscience.com/609546918/odata/DONOR'
username <- 'chunhua.dai@vanderbilt.edu'
password <- 'Core#2017'
response = GET(url,
add_headers(.headers = c('Content-Type' = 'application/json;odata.metadata=minimal;charset=UTF-8',
'Prefer'='odata.maxpagesize=1500')),
authenticate(username,
password,
type = 'basic'))
data <- content(response, as = 'text') %>%
fromJSON()
class(data[2])
api_data <- data[[2]]
col_conv <- read_csv('../data/20221206-col_conversions.csv')
w_api_cols <- col_conv$API_col
w_lims_cols <- col_conv$LIMS_col
filt_cols <- api_data %>%
select(w_api_cols)
select_data <- filt_cols %>%
mutate(AGE_IN_YEARS = round(if_else((CI_DONOR_AGE_UNITS == 'months'), (CI_DONOR_AGE/12),
if_else((CI_DONOR_AGE_UNITS == 'days'), (CI_DONOR_AGE/365), CI_DONOR_AGE)), 4)) %>%
mutate(ISLETS_ISOLATION_CENTER = if_else(str_detect(ISLETS_ISOLATION_CENTER, 'Pennsyl') == T, 'University of Pennsylvania',
if_else(str_detect(ISLETS_ISOLATION_CENTER, 'Louisville') == T, 'University of Louisville',
if_else(str_detect(ISLETS_ISOLATION_CENTER, 'UCSF') == T, 'USCF',
if_else(str_detect(ISLETS_ISOLATION_CENTER, 'Southern California') == T, 'Southern California',
if_else(str_detect(ISLETS_ISOLATION_CENTER, 'Prodo') == T, 'Prodo',
if_else(str_detect(ISLETS_ISOLATION_CENTER, 'The\\sScharp|(?<!\\s)Scharp') == T, 'Scharp-Lacy Research Institute',
if_else(str_detect(ISLETS_ISOLATION_CENTER, 'Alberta') == T, 'University of Alberta',
if_else(str_detect(ISLETS_ISOLATION_CENTER, 'Pittsburgh') == T, 'University of Pittsburgh',
if_else(str_detect(ISLETS_ISOLATION_CENTER, 'Cincinnati') == T, "Cincinnati Children's",
if_else(str_detect(ISLETS_ISOLATION_CENTER, 'Tennessee') == T, 'Tennessee Donor Services',ISLETS_ISOLATION_CENTER)))))))))))
lot_processing <- select_data$DONOR_PROCESSING_FROM_LOT
lot_processing <- lot_processing[!is.na(lot_processing)]
lot_processing_list <- str_c(lot_processing, collapse = '-')
lot_processing_list <- str_split(lot_processing_list, '-')
processing_unique <- sapply(lot_processing_list, unique)
remove <- c('PFA', 'fixed CMC', 'embedded', 'unknown', 'sequencing')
processing_unique <- append(processing_unique[! processing_unique %in% remove], c('PFA-fixed CMC-embedded', 'RNA-sequencing'))
for (i in processing_unique) {
variable <- as.symbol(i)
select_data <- select_data %>%
mutate(variable = str_count(DONOR_PROCESSING_FROM_LOT, i)) %>%
rename_with(~ gsub('variable', i, .x, fixed = T))
}
select_data <- select_data %>%
mutate(RNA = RNA - `RNA-sequencing`) %>%
select(-DONOR_PROCESSING_FROM_LOT)
date_cols = c('DATE_PANCREAS_ISLET_RECEIVED','CI_DATE_PANCREAS_PROCESSED')
date_time_cols = c('DATE___TIME_OF_DEATH', 'DATE___TIME_OF_CROSS_CLAMP')
date_time_cols_2 = c('TIME_PANCREAS_PROCUREMENT')
to_numeric = c('C_PEPTIDE_LEVELS', 'COLD_ISCHEIC_TIME')
select_data <- select_data %>%
mutate_at(vars(contains(date_cols)), ymd) %>%
mutate_at(vars(contains(date_time_cols)), ymd_hms) %>%
mutate_at(vars(contains(date_time_cols_2)), mdy_hm) %>%
mutate(C_PEPTIDE_LEVEL = if_else(C_PEPTIDE_LEVEL == '<0.02', '0.01', C_PEPTIDE_LEVEL)) %>%
mutate_at(vars(contains(to_numeric)), as.numeric)
write_csv(select_data, '../data/20221207-fixed_cols.csv')
lims_data <- read_csv('../data/20221207-fixed_cols.csv')
lims_data <- lims_data %>%
mutate(AGE_GROUPS = if_else((AGE_IN_YEARS > 0&AGE_IN_YEARS <= 10), '1-10',
if_else((AGE_IN_YEARS > 10&AGE_IN_YEARS <= 20), '11-20',
if_else((AGE_IN_YEARS > 20&AGE_IN_YEARS <= 30), '21-30',
if_else((AGE_IN_YEARS > 30&AGE_IN_YEARS <= 40), '31-40',
if_else((AGE_IN_YEARS > 40&AGE_IN_YEARS <= 50), '41-50',
if_else((AGE_IN_YEARS > 50&AGE_IN_YEARS <= 60), '51-60',
if_else((AGE_IN_YEARS > 60&AGE_IN_YEARS <= 70), '61-70',
if_else((AGE_IN_YEARS > 70&AGE_IN_YEARS <= 80), '71-80',
if_else((AGE_IN_YEARS > 80&AGE_IN_YEARS <= 90), '81-90',
if_else((AGE_IN_YEARS > 90&AGE_IN_YEARS <= 100), '91-100', 'NA')))))))))))
lims_data %>%
ggplot(aes(x = AGE_GROUPS, fill = ISLETS_ISOLATION_CENTER)) +
geom_bar()
lims_data %>%
ggplot(aes(x = ISLETS_ISOLATION_CENTER, fill = AGE_GROUPS)) +
geom_bar()
lims_data %>%
ggplot(aes(x = ISLETS_ISOLATION_CENTER, fill = AGE_GROUPS)) +
geom_bar()+
coord_flip()
lims_data %>%
ggplot(aes(x = ISLETS_ISOLATION_CENTER, fill = CI_DONOR_RACE)) +
geom_bar()+
coord_flip()
lims_data %>%
ggplot(aes(x = fct_infreq(ISLETS_ISOLATION_CENTER), fill = CI_DONOR_RACE)) +
geom_bar()+
coord_flip()
?fct_infreq
lims_data %>%
ggplot(aes(x = fct_infreq(ISLETS_ISOLATION_CENTER, ordered = 'desc'), fill = CI_DONOR_RACE)) +
geom_bar()+
coord_flip()
lims_data %>%
ggplot(aes(x = fct_infreq(ISLETS_ISOLATION_CENTER, ordered = T), fill = CI_DONOR_RACE)) +
geom_bar()+
coord_flip()
lims_data %>%
ggplot(aes(x = fct_infreq(ISLETS_ISOLATION_CENTER, ordered = F), fill = CI_DONOR_RACE)) +
geom_bar()+
coord_flip()
lims_data %>%
ggplot(aes(x = fct_rev(fct_infreq(ISLETS_ISOLATION_CENTER, ordered = F)), fill = CI_DONOR_RACE)) +
geom_bar()+
coord_flip()
