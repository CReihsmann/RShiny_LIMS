install.packages('tidyverse')
library(tidyverse)
lib
library(tidyverse)
updateR()
install.packages('installr')
updater()
library(installr)
updateR()
if (!requireNamespace("remotes", quietly = TRUE)) {
install.packages("remotes")
}
remotes::install_github("mojaveazure/seurat-disk")
install.packages("DT")
install.packages("reticulate")
shiny::runApp('Documents/nss_docs/nss_projects/codex_halo_qc/HALO_QC')
runApp('Documents/nss_docs/nss_projects/codex_halo_qc/HALO_QC')
runApp('Documents/nss_docs/nss_projects/codex_halo_qc/HALO_QC')
shiny::runApp('Documents/nss_docs/nss_projects/codex_halo_qc/HALO_QC_II')
install.packages('Seurat')
library(Seurat)
library(data.table)
library(tidyverse)
rawfile <- 'https://github.com/liuqivandy/scRNABatchQC/raw/master/bioplar1.csv.gz'
rawdata <- data.frame(fread(rawfile),row.names=1)
bioplar1 <- CreateSeuratObject(counts=rawdata,min.cells = 3, min.features = 200, project = 'bioplar')
View(bioplar1)
View(rawdata)
bioplar1[['percent.mt']]<-PercentageFeatureSet(bioplar1, pattern = '^mt-"')
bioplar1 <- subset(bioplar1,subset-nFeature_RNA > 200 & nCount_RNA>500 & percent.mt<10)
bioplar1 <- subset(bioplar1,subset=nFeature_RNA > 200 & nCount_RNA>500 & percent.mt<10)
bioplar1 <- NormalizeData(bioplar1) %>%
FindVariableFeatures() %>%
ScaleData() %>%
RunPCA() %>% FindNeighbors() %>%
FindClusters()
library('tidyverse')
library(ggplot2)
set.seed(2022)
library('tidyverse')
library(ggplot2)
set.seed(2022)
n <- 100
x <- rnorm(n)
y <- 3*x + rnorm(n,0,5)
dat<-as.data.frame(cbind(y,x))
plot(y~x, data=d1)
ggplot(aes(x=dat$x, y=dat$y)) %>%
geom_point()
ggplot(aes(x=dat$x, y=dat$y)) +
geom_point()
dat<-as.data.frame(cbind(y,x))
View(dat)
d1<-as.data.frame(cbind(y,x))
ggplot(aes(x=d1$x, y=d1$y)) +
geom_point()
librar(lattice)
library(lattice)
with(d1, plot*x,y, pch=16)
n <- 100
x <- rnorm(n)
y <- 3*x + rnorm(n,0,5)
d1<-as.data.frame(cbind(y,x))
ggplot(aes(x=d1$x, y=d1$y)) +
geom_point()
with(d1, plot*x,y, pch=16)
d1 %>%
ggplot(aes(x=x, y=y)) +
geom_point()
d1 %>%
ggplot(aes(x=x, y=y)) +
geom_point() +
geom_smooth(method = 'lm')
d1 %>%
ggplot(aes(x=x, y=y)) +
geom_point() +
geom_smooth(method = 'lm') %>%
geom_smooth(method = 'loess')
d1 %>%
ggplot(aes(x=x, y=y)) +
geom_point() +
geom_smooth(method = 'lm') +
geom_smooth(method = 'loess')
cor.test(x,y, method = 'pearson')
cor.test(x,y, method = 'spearman')
spearmanCI <- function(x, y, alpha = 0.5){
rs <- cor(x, y, method = 'spearman', use = 'complete.obs')
n <- sum(complete.cases(x,y))
sort(tanh(atanh(rs) + c(-1,1)*sqrt((1+rs^2/2)/(n-3)*qnorm(p=alpha/2))))
}
spearmanCI(x,y)
sort(tanh(atanh(rs)) + c(-1,1)*sqrt((1+rs^2/2)/(n-3)*qnorm(p=alpha/2)))
spearmanCI <- function(x, y, alpha = 0.5){
rs <- cor(x, y, method = 'spearman', use = 'complete.obs')
n <- sum(complete.cases(x,y))
sort(tanh(atanh(rs)) + c(-1,1)*sqrt((1+rs^2/2)/(n-3)*qnorm(p=alpha/2)))
}
spearmanCI(x,y)
spearmanCI <- function(x, y, alpha = 0.5){
rs <- cor(x, y, method = 'spearman', use = 'complete.obs')
n <- sum(complete.cases(x,y))
sort(tanh(atanh(rs) + c(-1,1)*sqrt((1+rs^2/2)/(n-3))*qnorm(p = alpha/2)))
}
spearmanCI(x,y)
set.seed(2022)
n <-100x <-rnorm(n)
y <-3*x + rnorm(n,0,5)
d1<-as.data.frame(cbind(y, x))
set.seed(2022)
n <-100
x <-rnorm(n)
y <-3*x + rnorm(n,0,5)
d1<-as.data.frame(cbind(y, x))
d1 %>%
ggplot(aes(x=x, y=y)) +
geom_point() +
geom_smooth(method = 'lm') +
geom_smooth(method = 'loess')
with(d1, plot*x,y, pch=16)
cor.test(x,y, method = 'pearson')
cor.test(x,y, method = 'spearman')
spearmanCI <- function(x, y, alpha = 0.5){
rs <- cor(x, y, method = 'spearman', use = 'complete.obs')
n <- sum(complete.cases(x,y))
sort(tanh(atanh(rs) + c(-1,1)*sqrt((1+rs^2/2)/(n-3))*qnorm(p = alpha/2)))
}
spearmanCI(x,y)
summary(lm(y~x, data=d1))
library(latticeExtra)
library(quantreg)
install.packages('quantreg')
summary(lm(y~x, data=d1))
xyplot(y~x, data=d1, col=1, pch=16)
?describe
??describe
install.packages('Hmisc')
?describe
??describe
library(Hmisc)
?describe
url = 'https://na1.platformforscience.com/609546918/odata/DONOR'
username <- 'chunhua.dai@vanderbilt.edu'
password <- 'Core#2017'
response = GET(url,
authenticate(username,
password,
type = 'basic'))
library(httr)
library(tidyverse)
library(jsonlite)
library(rvest)
url = 'https://na1.platformforscience.com/609546918/odata/DONOR'
username <- 'chunhua.dai@vanderbilt.edu'
password <- 'Core#2017'
response = GET(url,
authenticate(username,
password,
type = 'basic'))
response$status_code
content(response, as = 'text')
content(response, as = 'parsed')
data <- content(response, as = 'parsed')
data <- content(response, as = 'parsed') %>%
fromJSON()
View(data)
?content
data <- content(response, as = 'parsed')
type(data)
class(data)
data <- content(response, as = 'text')
class(data)
data <- content(response)
class(data)
data <- content(response, as = 'text') %>%
fromJSON()
class(data)
View(data)
url = 'https://na1.platformforscience.com/609546918/odata/DONOR?$count=true'
response = GET(url,
authenticate(username,
password,
type = 'basic'))
response$status_code
data <- content(response, as = 'text') %>%
fromJSON()
url = 'https://na1.platformforscience.com/609546918/odata/DONOR?$orderby=property asc'
response = GET(url,
authenticate(username,
password,
type = 'basic'))
url = 'https://na1.platformforscience.com/609546918/odata/DONOR?$orderby=propertyasc'
response = GET(url,
authenticate(username,
password,
type = 'basic'))
response$status_code
url = 'https://na1.platformforscience.com/609546918/odata/DONOR?$orderby=property asc'
response = GET(url,
authenticate(username,
password,
type = 'basic'))
url = 'https://na1.platformforscience.com/609546918/odata/DONOR?$orderby=property desc'
response = GET(url,
authenticate(username,
password,
type = 'basic'))
url = 'https://na1.platformforscience.com/609546918/odata/DONOR?$limit=NULL'
response = GET(url,
authenticate(username,
password,
type = 'basic'))
response$status_code
url = 'https://na1.platformforscience.com/609546918/odata/DONOR?$limit='
response = GET(url,
authenticate(username,
password,
type = 'basic'))
response$status_code
url = 'https://na1.platformforscience.com/609546918/odata/DONOR?all'
response = GET(url,
authenticate(username,
password,
type = 'basic'))
response$status_code
data <- content(response, as = 'text') %>%
fromJSON()
url = 'https://na1.platformforscience.com/609546918/odata.maxpagesize=1000/DONOR'
response = GET(url,
authenticate(username,
password,
type = 'basic'))
response$status_code
?GET
url = 'https://na1.platformforscience.com/609546918/odata/DONOR'
response = GET(url,
add_headers('odata.maxpagesize'='1000'),
authenticate(username,
password,
type = 'basic'))
response$status_code
data <- content(response, as = 'text') %>%
fromJSON()
response = GET(url,
add_headers('maxpagesize'='1000'),
authenticate(username,
password,
type = 'basic'))
response$status_code
data <- content(response, as = 'text') %>%
fromJSON()
response = GET(url,
add_headers('maxpagesize'=1000),
authenticate(username,
password,
type = 'basic'))
response$status_code
data <- content(response, as = 'text') %>%
fromJSON()
response = GET(url,
add_headers('odata.maxpagesize'=1000),
authenticate(username,
password,
type = 'basic'))
response$status_code
data <- content(response, as = 'text') %>%
fromJSON()
response = GET(url,
add_headers('Prefer'='odata.maxpagesize=1000'),
authenticate(username,
password,
type = 'basic'))
response$status_code
data <- content(response, as = 'text') %>%
fromJSON()
url = 'https://na1.platformforscience.com/609546918/odata/DONOR'
username <- 'chunhua.dai@vanderbilt.edu'
password <- 'Core#2017'
response = GET(url,
add_headers('Prefer'='odata.maxpagesize=1000'),
authenticate(username,
password,
type = 'basic'))
data <- content(response, as = 'text') %>%
fromJSON()
response = GET(url,
add_headers(.headers = c('Prefer'='odata.maxpagesize=1000')),
authenticate(username,
password,
type = 'basic'))
response$status_code
data <- content(response, as = 'text') %>%
fromJSON()
response = GET(url,
add_headers('Prefer'='odata.maxpagesize=1000'),
authenticate(username,
password,
type = 'basic'))
response$status_code
data <- content(response, as = 'text') %>%
fromJSON()
response = GET(url,
add_headers(.headers = c('Content-Type' = 'application/json;odata.metadata=minimal;charset=UTF-8',
'Prefer'='odata.maxpagesize=1000')),
authenticate(username,
password,
type = 'basic'))
response$status_code
data <- content(response, as = 'text') %>%
fromJSON()
response = GET(url,
add_headers(.headers = c('Content-Type' = 'application/json;odata.metadata=minimal;charset=UTF-8',
'tenantId', 'Vanderbilt University PROD',
'Prefer'='odata.maxpagesize=1000')),
authenticate(username,
password,
type = 'basic'))
response$status_code
response = GET(url,
add_headers(.headers = c('Content-Type' = 'application/json;odata.metadata=minimal;charset=UTF-8',
'tenantId', 'Vanderbilt University PROD',
'Prefer'='odata.maxpagesize=1000')),
authenticate(username,
password,
type = 'basic'))
response$status_code
response = GET(url,
add_headers(.headers = c('Content-Type' = 'application/json;odata.metadata=minimal;charset=UTF-8',
'Prefer'='odata.maxpagesize=1000')),
authenticate(username,
password,
type = 'basic'))
response$status_code
data[1]
data[2]
response = GET(url,
add_headers(.headers = c('Content-Type' = 'application/json;odata.metadata=minimal;charset=UTF-8',
Prefer='odata.maxpagesize=1000')),
authenticate(username,
password,
type = 'basic'))
response$status_code
data <- content(response, as = 'text') %>%
fromJSON()
test <- data[2]
View(test)
data[2]
data[[2]]
test <- data[[2]]
View(test)
response = GET(url,
add_headers(.headers = c('Content-Type' = 'application/json;odata.metadata=minimal;charset=UTF-8')),
authenticate(username,
password,
type = 'basic'))
response$status_code
data <- content(response, as = 'text') %>%
fromJSON()
test <- data[[2]]
response = GET(url,
add_headers(.headers = c('Content-Type' = 'application/json;odata.metadata=minimal;charset=UTF-8',
'Prefer'='odata.maxpagesize=1000')),
authenticate(username,
password,
type = 'basic'))
response$status_code
data <- content(response, as = 'text') %>%
fromJSON()
class(data)
class(data[[2]])
class(data[2)
class(data[2])
test <- data[[2]]
test %>%
colnames()
lims_data <- data[[2]]
View(lims_data)
api_data <- data[[2]]
select_data < api_data[colSums(!is.na(api_data)) > 0]
select_data <- api_data[colSums(!is.na(api_data)) > 0]
View(select_data)
select_data <-
select(colSums(!is.na(api_data)) > 0)
select_data <- api_data
select_data <- api_data %>%
select(colSums(!is.na(api_data)) > 0)
select(where(~sum(!is.na(.x)) > 0))
library(tidyverse)
select_data <- api_data
select_data <- api_data %>%
select(
where(
~sum(!is.na(.x)) > 0
)
)
select_data <- api_data %>%
select(where(~sum(!is.na(.x)) > 0)) %>%
select(-c(DONOR, Id, Sequence, Created, Modified, Active, LikedBy, FollowedBy, Locked, DONOR_CREATED, `HLA_DOCUMENT@odata.mediaContentType`))
select_data <- api_data %>%
select(where(~sum(!is.na(.x)) > 0)) %>%
select(-c(EntityTypeName, Id, Sequence, Created, Modified, Active, LikedBy, FollowedBy, Locked, DONOR_CREATED, `HLA_DOCUMENT@odata.mediaContentType`))
shiny::runApp('Documents/EDA/RShiny_LIMS/LIMS_Data')
runApp('Documents/EDA/RShiny_LIMS/LIMS_Data')
runApp('Documents/EDA/RShiny_LIMS/LIMS_Data')
runApp()
runApp()
runApp()
runApp('Documents/EDA/RShiny_LIMS/LIMS_Data')
runApp('Documents/EDA/RShiny_LIMS/LIMS_Data')
runApp('Documents/EDA/RShiny_LIMS/LIMS_Data')
runApp('Documents/EDA/RShiny_LIMS/LIMS_Data')
url = 'https://na1.platformforscience.com/609546918/odata/DONOR'
username <- 'chunhua.dai@vanderbilt.edu'
password <- 'Core#2017'
response = GET(data_url,
add_headers(.headers = headers),
authenticate(user = input$lims_email,
password = input$lims_password,
type = 'basic'))
data <- content(response, as = 'text') %>%
fromJSON()
response = GET(data_url,
add_headers(.headers = headers),
authenticate(user = input$lims_email,
password = input$lims_password,
type = 'basic'))
library(httr)
library(tidyverse)
library(jsonlite)
library(rvest)
library(lubridate)
url = 'https://na1.platformforscience.com/609546918/odata/DONOR'
username <- 'chunhua.dai@vanderbilt.edu'
password <- 'Core#2017'
response = GET(data_url,
add_headers(.headers = headers),
authenticate(user = input$lims_email,
password = input$lims_password,
type = 'basic'))
response = GET(data_url,
add_headers(.headers = headers),
authenticate(user = username,
password = password,
type = 'basic'))
data <- content(response, as = 'text') %>%
fromJSON()
class(data[2])
class(data[[2]])
api_data <- as.tibble(data[[2]])
api_data <- as_tibble(data[[2]])
View(api_data)
runApp('Documents/EDA/RShiny_LIMS/LIMS_Data')
runApp('Documents/EDA/RShiny_LIMS/LIMS_Data')
runApp('Documents/EDA/RShiny_LIMS/LIMS_Data')
runApp()
runApp()
runApp('Documents/EDA/RShiny_LIMS/LIMS_Data')
runApp('Documents/EDA/RShiny_LIMS/LIMS_Data')
runApp('Documents/EDA/RShiny_LIMS/LIMS_Data')
runApp('Documents/EDA/RShiny_LIMS/LIMS_Data')
runApp('Documents/EDA/RShiny_LIMS/LIMS_Data')
runApp('Documents/EDA/RShiny_LIMS/LIMS_Data')
runApp('Documents/EDA/RShiny_LIMS/LIMS_Data')
runApp('Documents/EDA/RShiny_LIMS/LIMS_Data')
runApp('Documents/EDA/RShiny_LIMS/LIMS_Data')
runApp('Documents/EDA/RShiny_LIMS/LIMS_Data')
runApp('Documents/EDA/RShiny_LIMS/LIMS_Data')
runApp('Documents/EDA/RShiny_LIMS/LIMS_Data')
runApp('Documents/EDA/RShiny_LIMS/LIMS_Data')
setwd("~/Documents/EDA/RShiny_LIMS/LIMS_Data")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shinydashboard)
library(shinydashboard)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Documents/nss_docs/nss_projects/codex_halo_qc/HALO_QC_II')
View(col_conv)
runApp()
runApp()
